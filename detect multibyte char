import unicodedata

def detect_multi_byte_characters(data_stream):
    """
    Detect multi-byte characters in the given data stream.

    Args:
    - data_stream (str): The input string data stream to check for multi-byte characters.

    Returns:
    - List of tuples containing (character, character_name, byte_length).
    """
    multi_byte_chars = []

    for char in data_stream:
        # Get the Unicode code point of the character
        code_point = ord(char)
        
        # Check if the character is a multi-byte character (non-ASCII)
        if code_point > 127:
            char_name = unicodedata.name(char, "UNKNOWN CHARACTER")
            byte_length = len(char.encode('utf-8'))
            multi_byte_chars.append((char, char_name, byte_length))

    return multi_byte_chars

def write_to_file(filename, multi_byte_chars):
    """
    Write the list of multi-byte characters to a file.

    Args:
    - filename (str): The name of the file to write to.
    - multi_byte_chars (list): The list of multi-byte characters.
    """
    with open(filename, 'w', encoding='utf-8') as file:
        for char, char_name, byte_length in multi_byte_chars:
            file.write(f"Character: {char}, Name: {char_name}, Byte Length: {byte_length}\n")

# Example usage
data_stream = "Hello, ‰∏ñÁïå! üåç"
multi_byte_chars = detect_multi_byte_characters(data_stream)

# Write the results to an output file
output_filename = 'unsupported_multibyte_characters.txt'
write_to_file(output_filename, multi_byte_chars)

print(f"Unsupported multi-byte characters have been written to {output_filename}")
